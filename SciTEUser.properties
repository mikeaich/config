USE_MONOSPACED=1

# Window Position and Configuration
position.left=
position.top=
position.width=1000
toolbar.visible=1
statusbar.visible=1

position.tile=1
pathbar.visible=1
are.you.sure.on.reload=1
reload.preserves.undo=1
tabbar.hide.one=1

title.full.path=2

# (Re)load on activate, prompt if modified
load.on.activate=1
are.you.sure.on.reload=1
check.if.already.open=0

# Formatting
eol.auto=1
tabsize=2
indent.size=2
use.tabs=0
indent.auto=1
backspace.unindents=1

# UI elements
selection.alpha=75
selection.back=#E0E0E0
caret.fore=#FFFFFF
caret.additional.blinks=0
caret.width=2
find.use.strip=1
replace.use.strip=1
line.margin.width=+4
line.margin.visible=1

# Colours
colour.code.comment.box=fore:#80A0FF
colour.code.comment.line=fore:#80A0FF
colour.code.comment.doc=fore:#80A0FF
colour.text.comment=fore:#80A0FF,back:#000000
colour.other.comment=fore:#80A0FF
colour.embedded.comment=back:#000000
colour.embedded.js=back:#222022
colour.notused=back:#FF0000
colour.number=fore:#FFA0A0
colour.keyword=fore:#FFFF60
colour.string=$(colour.number)
colour.char=fore:#7F007F
colour.operator=fore:#FFFFFF
colour.preproc=fore:#FF80FF
colour.error=fore:#FFFF00,back:#FF0000
colour.identifier=fore:#ffffff

# Global default styles for all languages
# Default
style.*.32=fore:#FFFFFF,back:#000000,$(font.base),size:9
# Line number
style.*.33=fore:#FFFF60,back:#000000,$(font.lucida.sans)
# Brace highlight
style.*.34=fore:#8080FF,bold
# Brace incomplete highlight
style.*.35=fore:#FF0000,bold
# Control characters
style.*.36=
# Indentation guides
style.*.37=fore:#000000,back:#000000

font.monospace=font:!Bitstream Vera Sans Mono,size:11

if USE_MONOSPACED
	font.base=$(font.monospace)
	font.small=$(font.monospace)
	font.comment=$(font.monospace)
	font.text=$(font.monospace)
	font.text.comment=$(font.monospace)
	font.embedded.base=$(font.monospace)
	font.embedded.comment=$(font.monospace)
	font.vbs=$(font.monospace)
	# font.monospace=font:Consolas,size:11

# >>> bash settings (derived from perl.properties, for some reason)

# Identifiers (functions, etc.)
style.bash.8=fore:#F0F0F0
# Scalars: $var
style.bash.9=fore:#B050FF
# Parameter expansion: ${var}
style.bash.10=fore:#8040F0
# Back Ticks
style.bash.11=fore:#FFFF00
# Here-doc (delimiter)
style.bash.12=fore:#FFFF00,back:#333033
# Here-doc (single quoted, q)
style.bash.13=fore:#FFFF00,back:#333033,notbold,eolfilled

# >>> will probably need Perl settings here too


# >>> diff/patch settings

# Default
style.diff.0=fore:#AFAFAF
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.diff.1=fore:#80A0FF
# Command (diff ...)
style.diff.2=fore:#CFCF00,back:#333033,eolfilled
# Source file (--- ...) and Destination file (+++ ...)
style.diff.3=fore:#BF4040
# Position setting (@@ ...)
style.diff.4=fore:#EF7070
# Line removal (-...)
style.diff.5=fore:#FF3030
# Line addition (+...)
style.diff.6=fore:#5050FF
# Line change (!...)
style.diff.7=fore:#7F7F7F

# >>> makefile settings

use.tabs.$(file.patterns.make)=1
tab.indents.$(file.patterns.make)=0

# Default
style.makefile.0=fore:#FFFFFF
# Comment: #
style.makefile.1=$(colour.other.comment),$(font.code.comment.box)
# Pre-processor or other comment: !
style.makefile.2=$(colour.keyword),bold
# Variable: $(x)
style.makefile.3=fore:#8080FF
# Operator
style.makefile.4=$(colour.other.operator)
# Target
style.makefile.5=fore:#FFFF00
# Error
style.makefile.9=$(colour.error),eolfilled
# Matched Operators
style.makefile.34=fore:#0000FF,notbold
style.makefile.35=fore:#FF0000,notbold

# >>> HTML settings

# Text
style.hypertext.0=fore:#DFDFDF,$(font.text)
# Tags
style.hypertext.1=fore:#3090FF
# Attributes
style.hypertext.3=fore:#00A0A0
# XML style tag ends '/>'
style.hypertext.11=$(style.hypertext.1)

# >>> Assembler settings

file.patterns.asm=$(file.patterns.asm) *.asm;*.s;*.S

# >>> Perl settings

# Identifiers (functions, etc.)
style.perl.11=fore:#F0F0F0
# Scalars: $var
style.perl.12=fore:#3090FF
# Array: @var
style.perl.13=fore:#5090FF
# Hash: %var
style.perl.14=fore:#7090FF
# Symbol table: *var
style.perl.15=fore:#9090FF

# >>> HTML settings

# Embedded Javascript
fontcolour.js=$(colour.embedded.js),$(font.js)
# JS Start - allows eol filled background to not start on same line as SCRIPT tag
style.hypertext.40=fore:#7F7F00
# JS Default
style.hypertext.41=fore:#FFFFFF,bold,$(fontcolour.js),eolfilled
# JS Comment
style.hypertext.42=$(colour.code.comment.box),$(fontcolour.js),eolfilled
# JS Line Comment
style.hypertext.43=$(colour.code.comment.line),$(fontcolour.js)
# JS Doc comment
style.hypertext.44=$(colour.code.comment.doc),$(fontcolour.js),eolfilled
# JS Number
style.hypertext.45=$(colour.number),$(fontcolour.js)
# JS Word
style.hypertext.46=fore:#FFFFFF,$(fontcolour.js)
# JS Keyword
style.hypertext.47=$(colour.keyword),bold,$(fontcolour.js)
# JS Double quoted string
style.hypertext.48=$(colour.string),$(fontcolour.js)
# JS Single quoted string
style.hypertext.49=$(colour.string),$(fontcolour.js)
# JS Symbols
style.hypertext.50=$(colour.operator),bold,$(fontcolour.js)
# JavaScript EOL
style.hypertext.51=back:#BFBBB0,eolfilled
# JavaScript RegEx
style.hypertext.52=back:#FFBBB0

# >>> Python settings

# White space
style.python.0=fore:#808080
# Comment
style.python.1=fore:#007F00,$(font.comment)
# Number
style.python.2=fore:#009F9F
# String
style.python.3=fore:#7F007F,$(font.monospace)
# Single quoted string
style.python.4=fore:#9F009F,$(font.monospace)
# Keyword
style.python.5=fore:#7070FF,bold
# Triple quotes
style.python.6=fore:#7F0000
# Triple double quotes
style.python.7=fore:#BF0000
# Class name definition
style.python.8=fore:#0066FF,bold
# Function or method name definition
style.python.9=fore:#007F7F,bold
# Operators
style.python.10=bold
# Identifiers
style.python.11=
# Comment-blocks
style.python.12=fore:#7F7F7F
# End of line where string is not closed
style.python.13=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Highlighted identifiers
style.python.14=fore:#407090
# Decorators
style.python.15=fore:#805000
# Matched Operators
style.python.34=fore:#0000FF,bold
style.python.35=fore:#FF0000,bold
# Braces are only matched in operator style
braces.python.style=10

# >>> Additional C/C++ keywords
#keywordclass.cpp.local=int8_t uint8_t int16_t uint16_t int32_t uint32_t int64_t uint64_t public private protected return

#keywordclass.cpp=$(keywordclass.cpp) $(keywordclass.cpp.local)
# keywords.$(file.patterns.cpp)=$(keywords.$(file.patterns.cpp)) $(keywordclass.cpp.local)

# >>> TCL settings

# Comment:.....; #comment
style.tcl.1=$(colour.code.comment.line),$(font.comment)
# Line Comment:  #comment
style.tcl.2=$(colour.code.comment.line),$(font.code.comment.line),back:#000000
# Keyword in quote
style.tcl.4=$(colour.string),bold
# In quote
style.tcl.5=$(colour.string),eolfilled
# Substitution starts with a brace ${woow}
style.tcl.9=$(colour.preproc)
# Modifier -xxx
style.tcl.10=fore:#BF00BF
# Expand (what and odd syntax)
style.tcl.11=$(colour.keyword),bold
# Keywords 2
style.tcl.13=$(colour.keyword),bold
# Keywords 3
style.tcl.14=$(colour.keyword),bold
# Keywords 4
style.tcl.15=$(colour.keyword),bold
# Other keywords (bozo test colors :-)
# Keywords 5
style.tcl.16=$(style.tcl.7),bold
# Keywords 6
style.tcl.17=$(style.tcl.7),bold
# Keywords 7
style.tcl.18=$(style.tcl.7),bold
# Keywords 8
style.tcl.19=$(style.tcl.7)
#comment box
style.tcl.20=$(colour.code.comment.box),$(font.code.comment.box),eolfilled
#comment block
style.tcl.21=$(colour.embedded.comment),$(font.embedded.comment)

# Matched Operators
style.tcl.34=fore:#0000FF,bold
style.tcl.35=fore:#FF0000,bold

# Braces are only matched in operator style
braces.tcl.style=10

# >>> Verilog settings
# Note that SciTEGlobal.properties is BROKEN for Verilog and VHDL.
# To enable these languages, you need to remove them from the
# imports.exclude list -- something hard to do on non-local installs.

# Keyword
style.verilog.5=$(colour.keyword)
# Operators
style.verilog.10=fore:#00c0c0
# keywords4, User defined identifiers and tasks
style.verilog.19=fore:#2aff00
# port declare (input output ioput)
style.verilog.21=fore:#CF0000
style.verilog.22=fore:#007FFF
style.verilog.23=fore:#0000FF
